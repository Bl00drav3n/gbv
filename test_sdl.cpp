//#include "sdlgb.h"
#include "gbv.h"
#include <SDL2/SDL.h>

#define WINDOW_SCALE  3
#define WINDOW_WIDTH  (WINDOW_SCALE * GBV_SCREEN_WIDTH)
#define WINDOW_HEIGHT (WINDOW_SCALE * GBV_SCREEN_HEIGHT)

static void load_tile(const unsigned char *src, gbv_u8 id) {
	memcpy(gbv_get_tile(id), src, GBV_TILE_SIZE);
}

static void sdl_graceful_exit(const char *fmt) {
	fprintf(stderr, fmt, SDL_GetError());
	SDL_Quit();
	exit(1);
}

gbv_u8 testmap[] =
{
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
	0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
	0x08,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x04,0x08,0x08,0x08,0x01,0x00,0x00,0x00,0x00,0x00,
	0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0x00,0x00,0x00,0x05,0x00,0x00,0x00,
	0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x05,0x00,
	0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
	0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,
	0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x05,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x06,0x06,0x06,0x02,0x00,0x00,0x00,0x00,0x00,
	0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x03,0x06,0x06,0x06,0x06,0x06,
	0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
	0x06,0x06,0x06,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00
};

gbv_u8 test_tiles[] =
{
	0x00,0x00,0x6E,0x6E,0x9F,0x93,0xBF,0x83,
	0xBF,0x83,0x7E,0x46,0x3C,0x2C,0x18,0x18,
	0x3C,0x3C,0x7E,0x7E,0xDB,0xDB,0xDB,0xDB,
	0xFF,0xFF,0x3C,0x00,0x7E,0x42,0x66,0x66,
	0x3C,0x3C,0x7E,0x42,0xFF,0x81,0xFF,0x81,
	0xFF,0xFF,0x42,0x42,0x42,0x42,0x3C,0x3C,
	0x1C,0x1C,0x3E,0x22,0x77,0x41,0x67,0x45,
	0x67,0x45,0x7F,0x49,0x3E,0x22,0x1C,0x1C
};

gbv_u8 glyph_data[] =
{
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x60,0x60,0x60,0x60,0x60,0x60,
	0x60,0x60,0x00,0x00,0x60,0x60,0x00,0x00,
	0x00,0x00,0x6C,0x6C,0x6C,0x6C,0x24,0x24,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x60,0x60,0x60,0x60,0x20,0x20,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x44,0x44,0x28,0x28,
	0x10,0x10,0x28,0x28,0x44,0x44,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x60,0x60,0x60,0x60,0x20,0x20,0x40,0x40,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x38,0x38,0x38,0x38,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x60,0x60,0x60,0x60,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x66,0x66,0x66,0x66,
	0x66,0x66,0x66,0x66,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x18,0x18,0x38,0x38,0x18,0x18,
	0x18,0x18,0x18,0x18,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x46,0x46,0x06,0x06,
	0x3C,0x3C,0x70,0x70,0x7E,0x7E,0x00,0x00,
	0x00,0x00,0x7C,0x7C,0x0E,0x0E,0x3C,0x3C,
	0x0E,0x0E,0x0E,0x0E,0x7C,0x7C,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x6C,0x6C,0x4C,0x4C,
	0x4C,0x4C,0x7E,0x7E,0x0C,0x0C,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x60,0x60,0x7C,0x7C,
	0x0E,0x0E,0x4E,0x4E,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x60,0x60,0x7C,0x7C,
	0x66,0x66,0x66,0x66,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x06,0x06,0x0C,0x0C,
	0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x4E,0x4E,0x3C,0x3C,
	0x4E,0x4E,0x4E,0x4E,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x4E,0x4E,0x4E,0x4E,
	0x3E,0x3E,0x0E,0x0E,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x00,0x00,0x60,0x60,0x60,0x60,
	0x00,0x00,0x60,0x60,0x60,0x60,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x78,0x78,0x8C,0x8C,0x0C,0x0C,0x38,0x38,
	0x30,0x30,0x00,0x00,0x30,0x30,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x4E,0x4E,0x4E,0x4E,
	0x7E,0x7E,0x4E,0x4E,0x4E,0x4E,0x00,0x00,
	0x00,0x00,0x7C,0x7C,0x66,0x66,0x7C,0x7C,
	0x66,0x66,0x66,0x66,0x7C,0x7C,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x66,0x66,0x60,0x60,
	0x60,0x60,0x66,0x66,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x7C,0x7C,0x4E,0x4E,0x4E,0x4E,
	0x4E,0x4E,0x4E,0x4E,0x7C,0x7C,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x60,0x60,0x7C,0x7C,
	0x60,0x60,0x60,0x60,0x7E,0x7E,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x60,0x60,0x60,0x60,
	0x78,0x78,0x60,0x60,0x60,0x60,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x66,0x66,0x60,0x60,
	0x6E,0x6E,0x66,0x66,0x3E,0x3E,0x00,0x00,
	0x00,0x00,0x46,0x46,0x46,0x46,0x7E,0x7E,
	0x46,0x46,0x46,0x46,0x46,0x46,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x18,0x18,0x18,0x18,
	0x18,0x18,0x18,0x18,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x1E,0x1E,0x0C,0x0C,0x0C,0x0C,
	0x6C,0x6C,0x6C,0x6C,0x38,0x38,0x00,0x00,
	0x00,0x00,0x66,0x66,0x6C,0x6C,0x78,0x78,
	0x78,0x78,0x6C,0x6C,0x66,0x66,0x00,0x00,
	0x00,0x00,0x60,0x60,0x60,0x60,0x60,0x60,
	0x60,0x60,0x60,0x60,0x7E,0x7E,0x00,0x00,
	0x00,0x00,0x46,0x46,0x6E,0x6E,0x7E,0x7E,
	0x56,0x56,0x46,0x46,0x46,0x46,0x00,0x00,
	0x00,0x00,0x46,0x46,0x66,0x66,0x76,0x76,
	0x5E,0x5E,0x4E,0x4E,0x46,0x46,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x66,0x66,0x66,0x66,
	0x66,0x66,0x66,0x66,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x7C,0x7C,0x66,0x66,0x66,0x66,
	0x7C,0x7C,0x60,0x60,0x60,0x60,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x62,0x62,0x62,0x62,
	0x6A,0x6A,0x64,0x64,0x3A,0x3A,0x00,0x00,
	0x00,0x00,0x7C,0x7C,0x62,0x62,0x62,0x62,
	0x7C,0x7C,0x68,0x68,0x66,0x66,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x60,0x60,0x3C,0x3C,
	0x0E,0x0E,0x4E,0x4E,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x18,0x18,0x18,0x18,
	0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,
	0x00,0x00,0x46,0x46,0x46,0x46,0x46,0x46,
	0x46,0x46,0x4E,0x4E,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x46,0x46,0x46,0x46,0x46,0x46,
	0x46,0x46,0x2C,0x2C,0x18,0x18,0x00,0x00,
	0x00,0x00,0x46,0x46,0x46,0x46,0x56,0x56,
	0x7E,0x7E,0x6E,0x6E,0x46,0x46,0x00,0x00,
	0x00,0x00,0x46,0x46,0x2C,0x2C,0x18,0x18,
	0x38,0x38,0x64,0x64,0x42,0x42,0x00,0x00,
	0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x3C,
	0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x0E,0x0E,0x1C,0x1C,
	0x38,0x38,0x70,0x70,0x7E,0x7E,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x4E,0x4E,0x4E,0x4E,
	0x7E,0x7E,0x4E,0x4E,0x4E,0x4E,0x00,0x00,
	0x00,0x00,0x7C,0x7C,0x66,0x66,0x7C,0x7C,
	0x66,0x66,0x66,0x66,0x7C,0x7C,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x66,0x66,0x60,0x60,
	0x60,0x60,0x66,0x66,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x7C,0x7C,0x4E,0x4E,0x4E,0x4E,
	0x4E,0x4E,0x4E,0x4E,0x7C,0x7C,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x60,0x60,0x7C,0x7C,
	0x60,0x60,0x60,0x60,0x7E,0x7E,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x60,0x60,0x60,0x60,
	0x78,0x78,0x60,0x60,0x60,0x60,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x66,0x66,0x60,0x60,
	0x6E,0x6E,0x66,0x66,0x3E,0x3E,0x00,0x00,
	0x00,0x00,0x46,0x46,0x46,0x46,0x7E,0x7E,
	0x46,0x46,0x46,0x46,0x46,0x46,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x18,0x18,0x18,0x18,
	0x18,0x18,0x18,0x18,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x1E,0x1E,0x0C,0x0C,0x0C,0x0C,
	0x6C,0x6C,0x6C,0x6C,0x38,0x38,0x00,0x00,
	0x00,0x00,0x66,0x66,0x6C,0x6C,0x78,0x78,
	0x78,0x78,0x6C,0x6C,0x66,0x66,0x00,0x00,
	0x00,0x00,0x60,0x60,0x60,0x60,0x60,0x60,
	0x60,0x60,0x60,0x60,0x7E,0x7E,0x00,0x00,
	0x00,0x00,0x46,0x46,0x6E,0x6E,0x7E,0x7E,
	0x56,0x56,0x46,0x46,0x46,0x46,0x00,0x00,
	0x00,0x00,0x46,0x46,0x66,0x66,0x76,0x76,
	0x5E,0x5E,0x4E,0x4E,0x46,0x46,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x66,0x66,0x66,0x66,
	0x66,0x66,0x66,0x66,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x7C,0x7C,0x66,0x66,0x66,0x66,
	0x7C,0x7C,0x60,0x60,0x60,0x60,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x62,0x62,0x62,0x62,
	0x6A,0x6A,0x64,0x64,0x3A,0x3A,0x00,0x00,
	0x00,0x00,0x7C,0x7C,0x62,0x62,0x62,0x62,
	0x7C,0x7C,0x68,0x68,0x66,0x66,0x00,0x00,
	0x00,0x00,0x3C,0x3C,0x60,0x60,0x3C,0x3C,
	0x0E,0x0E,0x4E,0x4E,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x18,0x18,0x18,0x18,
	0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,
	0x00,0x00,0x46,0x46,0x46,0x46,0x46,0x46,
	0x46,0x46,0x4E,0x4E,0x3C,0x3C,0x00,0x00,
	0x00,0x00,0x46,0x46,0x46,0x46,0x46,0x46,
	0x46,0x46,0x2C,0x2C,0x18,0x18,0x00,0x00,
	0x00,0x00,0x46,0x46,0x46,0x46,0x56,0x56,
	0x7E,0x7E,0x6E,0x6E,0x46,0x46,0x00,0x00,
	0x00,0x00,0x46,0x46,0x2C,0x2C,0x18,0x18,
	0x38,0x38,0x64,0x64,0x42,0x42,0x00,0x00,
	0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x3C,
	0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,
	0x00,0x00,0x7E,0x7E,0x0E,0x0E,0x1C,0x1C,
	0x38,0x38,0x70,0x70,0x7E,0x7E,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

const gbv_u8 test_tile0 = 19;
const gbv_u8 test_tile1 = 20;
const gbv_u8 test_tile2 = 21;
const gbv_u8 test_tile3 = 22;
const gbv_u8 glyph_id_start = 23;

gbv_u8 get_glyph_id(char c) {
	return glyph_id_start + c;
}

//[1][g] [1][h] [12][s] [123][c]
struct display {
	char goombas[3];
	char hearts[3];
	char shrooms[3];
	char coins[3];
};

void draw_display(display *d) {
	gbv_u8 *map = gbv_get_tile_map1();
	gbv_u8 idx = 0;
	map[idx++] = get_glyph_id(d->goombas[0]);
	map[idx++] = get_glyph_id(d->goombas[1]);
	map[idx++] = get_glyph_id(d->goombas[2]);
	map[idx++] = test_tile0;
	map[idx++] = get_glyph_id(' ');
	map[idx++] = get_glyph_id(d->hearts[0]);
	map[idx++] = get_glyph_id(d->hearts[1]);
	map[idx++] = get_glyph_id(d->hearts[2]);
	map[idx++] = test_tile1;
	map[idx++] = get_glyph_id(' ');
	map[idx++] = get_glyph_id(d->shrooms[0]);
	map[idx++] = get_glyph_id(d->shrooms[1]);
	map[idx++] = get_glyph_id(d->shrooms[2]);
	map[idx++] = test_tile2;
	map[idx++] = get_glyph_id(' ');
	map[idx++] = get_glyph_id(d->coins[0]);
	map[idx++] = get_glyph_id(d->coins[1]);
	map[idx++] = get_glyph_id(d->coins[2]);
	map[idx++] = test_tile3;
}

void convert_integer(gbv_u16 n, gbv_u8 max_num_digits, char *out) {
	gbv_u8 offset = max_num_digits;
	gbv_u16 n_limit = 10;
	for (int i = 1; i < max_num_digits; i++) {
		n_limit *= 10;
	}
	if (n < n_limit) {
		while (n) {
			char digit = '0' + n % 10;
			n /= 10;
			out[--offset] = digit;
		}
		while (offset) {
			out[--offset] = ' ';
		}
	}
	else {
		for (int i = 0; i <= offset; i++) {
			out[i] = 'x';
		}
	}
}

void lcdc_stat_callback() {
	gbv_lcd_mode mode = gbv_stat_mode();
	switch (mode) {
	case GBV_LCD_MODE_TRANSFER:
		if (gbv_stat_lyc()) {
			gbv_lcdc_reset(GBV_LCDC_WND_ENABLE);
		}
		break;
	case GBV_LCD_MODE_VBLANK:
		gbv_lcdc_set(GBV_LCDC_WND_ENABLE);
	}
}

int main(int argc, char *argv[]) {
	/* platform setup */
	if (SDL_Init(SDL_INIT_VIDEO) != 0) {
		sdl_graceful_exit("Error initializing SDL video: %s\n");
	}
	SDL_Window * window = SDL_CreateWindow("GBV Test", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_SHOWN);
	if (!window) {
		sdl_graceful_exit("Error creating window: %s\n");
	}
	SDL_Renderer * renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
	if (!renderer) {
		sdl_graceful_exit("Error creating renderer: %s\n");
	}
	SDL_Texture * framebuffer = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_STREAMING, GBV_SCREEN_WIDTH, GBV_SCREEN_HEIGHT);
	if (!framebuffer) {
		sdl_graceful_exit("Error creating framebuffer: %s\n");
	}

	SDL_version sdl_ver;	
	SDL_GetVersion(&sdl_ver);
	fprintf(stdout, "Initialized SDL version %d.%d.%d\n", sdl_ver.major, sdl_ver.minor, sdl_ver.patch);
	fprintf(stdout, "  platform:         %s\n", SDL_GetPlatform());
	fprintf(stdout, "  video driver:     %s\n", SDL_GetCurrentVideoDriver());
	fprintf(stdout, "  framebuffer size: %dx%d\n", GBV_SCREEN_WIDTH, GBV_SCREEN_HEIGHT);
	fprintf(stdout, "  window size:      %dx%d\n", WINDOW_WIDTH, WINDOW_HEIGHT);
	fprintf(stdout, "  scale:            %dx\n", WINDOW_SCALE);

	/* gbv version */
	int maj, min, patch;
	gbv_get_version(&maj, &min, &patch);
	fprintf(stdout, "\nusing GBV version %d.%d.%d\n", maj, min, patch);

	/* gb setup */
	unsigned char gbmem[GBV_HW_MEMORY_SIZE] = {};
	unsigned char video_mem[GBV_SCREEN_SIZE] = {};
	gbv_init(&gbmem);

	/* enable lcd */
	gbv_lcdc_set(GBV_LCDC_CTRL);

	/* enable bg */
	gbv_lcdc_set(GBV_LCDC_BG_ENABLE);

	/* enable window */
	gbv_lcdc_set(GBV_LCDC_WND_ENABLE);

	/* set up 4 color 2bpp palette */
	gbv_io_bgp = 0xE4;

	/* enable obj */
	gbv_lcdc_set(GBV_LCDC_OBJ_ENABLE);

	/* set up sprite palette */
	gbv_io_obp0 = 0xD0;

	/* set up test bg map 1 */

	gbv_u8 * map_data0 = gbv_get_tile_map0();
	for (int i = 0; i < 16; i++) {
		int x = i % 4 + 8;
		int y = i / 4 + 7;
		map_data0[y * GBV_BG_TILES_X + x] = i + 1;
	}

	unsigned char bg_tiles[] =
	{
		0xFF,0xFF,0x01,0xFF,0x01,0xFF,0xF9,0x07,
		0xF9,0x07,0x19,0x07,0x19,0x07,0x19,0x07,
		0x19,0x07,0x19,0x07,0x19,0x07,0xF9,0x07,
		0xF9,0x07,0x01,0xFF,0x01,0xFF,0xFF,0xFF,
		0x98,0xE0,0x98,0xE0,0x98,0xE0,0x9F,0xE0,
		0x9F,0xE0,0x80,0xFF,0x80,0xFF,0xFF,0xFF,
		0xFF,0xFF,0x80,0xFF,0x80,0xFF,0x9F,0xE0,
		0x9F,0xE0,0x98,0xE0,0x98,0xE0,0x98,0xE0,
		0x19,0x07,0x19,0x07,0x19,0x07,0x19,0x07,
		0x19,0x07,0x19,0x07,0x19,0x07,0x19,0x07,
		0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
		0xFF,0x00,0x00,0xFF,0x00,0xFF,0xFF,0xFF,
		0x98,0xE0,0x98,0xE0,0x98,0xE0,0x98,0xE0,
		0x98,0xE0,0x98,0xE0,0x98,0xE0,0x98,0xE0,
		0xFF,0xFF,0x00,0xFF,0x00,0xFF,0xFF,0x00,
		0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	};
	for (int i = 0; i < 16; i++) {
		load_tile(bg_tiles + i * 16, i + 1);
	}

	SDL_assert(sizeof(testmap) == GBV_BG_MAP_MEMORY_SIZE);
	memcpy(gbv_get_tile_map0(), testmap, GBV_BG_MAP_MEMORY_SIZE);

	gbv_tile * tile17 = gbv_get_tile(17);
	tile17->data[0][0] = 0xFF;
	tile17->data[0][1] = 0xFF;
	tile17->data[1][0] = 0x81;
	tile17->data[1][1] = 0x81;
	tile17->data[2][0] = 0x81;
	tile17->data[2][1] = 0x81;
	tile17->data[3][0] = 0x81;
	tile17->data[3][1] = 0x81;
	tile17->data[4][0] = 0x81;
	tile17->data[4][1] = 0x81;
	tile17->data[5][0] = 0x81;
	tile17->data[5][1] = 0x81;
	tile17->data[6][0] = 0x81;
	tile17->data[6][1] = 0x81;
	tile17->data[7][0] = 0xFF;
	tile17->data[7][1] = 0xFF;

	gbv_tile * tile18 = gbv_get_tile(18);
	tile18->data[0][0] = 0xAA;
	tile18->data[0][1] = 0xAA;
	tile18->data[1][0] = 0xAA;
	tile18->data[1][1] = 0xAA;
	tile18->data[2][0] = 0xAA;
	tile18->data[2][1] = 0xAA;
	tile18->data[3][0] = 0xAA;
	tile18->data[3][1] = 0xAA;
	tile18->data[4][0] = 0xAA;
	tile18->data[4][1] = 0xAA;
	tile18->data[5][0] = 0xAA;
	tile18->data[5][1] = 0xAA;
	tile18->data[6][0] = 0xAA;
	tile18->data[6][1] = 0xAA;
	tile18->data[7][0] = 0xAA;
	tile18->data[7][1] = 0xAA;

	/* set up sprites */
	gbv_obj_char sprites[GBV_OBJ_COUNT] = {};
	sprites[0].id = 17;
	sprites[1].id = 18;

	gbv_io_wx = 7;
	gbv_io_wy = 0;
	gbv_lcdc_reset(GBV_LCDC_BG_MAP_SELECT);
	gbv_lcdc_set(GBV_LCDC_WND_MAP_SELECT);

	gbv_io_lyc = 8;
	gbv_stat_set(GBV_STAT_LYC_INT);
	gbv_stat_set(GBV_STAT_VBLANK_INT);
	gbv_lcdc_set_stat_interrupt(lcdc_stat_callback);

	memcpy(gbv_get_tile(test_tile0), test_tiles, sizeof(test_tiles));

	gbv_tile *glyphs = gbv_get_tile(glyph_id_start);
	memcpy(glyphs, glyph_data, sizeof(glyph_data));

	display d = {};
	gbv_u8 goombas = 1;
	gbv_u8 hearts = 2;
	gbv_u8 shrooms = 3;
	gbv_u8 coins = 4;
	convert_integer(goombas, sizeof(d.goombas), d.goombas);
	convert_integer(shrooms, sizeof(d.shrooms), d.shrooms);
	convert_integer(hearts, sizeof(d.hearts), d.hearts);
	convert_integer(coins, sizeof(d.goombas), d.coins);
	draw_display(&d);

	gbv_u8 sprite_x = 8, sprite_y = 16;
	/* main loop */
	int running = 1;
	while (running) {
		SDL_Event evt;
		while (SDL_PollEvent(&evt)) {
			switch (evt.type) {
			case SDL_QUIT:
				running = false;
				break;
			case SDL_KEYDOWN:
				switch (evt.key.keysym.sym) {
				case SDLK_UP:
					gbv_io_scy--;
					break;
				case SDLK_DOWN:
					gbv_io_scy++;
					break;
				case SDLK_RIGHT:
					gbv_io_scx++;
					break;
				case SDLK_LEFT:
					gbv_io_scx--;
					break;
				case SDLK_RETURN:
				case SDLK_RETURN2:
					if (gbv_io_lcdc & GBV_LCDC_BG_ENABLE)
						gbv_lcdc_reset(GBV_LCDC_BG_ENABLE);
					else
						gbv_lcdc_set(GBV_LCDC_BG_ENABLE);
					break;
				} break;
			}
		}

		gbv_io_obp0 += 6;
		sprites[0].x = sprite_x;
		sprites[0].y = sprite_y;
		gbv_transfer_oam_data(sprites);

		/* render gbv state to 8bit per pixel buffer */
		gbv_palette palette = { 0xFF, 0xAA, 0x55, 0x00 };
		gbv_render(video_mem, GBV_RENDER_MODE_GRAYSCALE_8, &palette);

		/* transfer data to framebuffer */
		void *video_mem_rgba;
		int video_mem_pitch;
		SDL_LockTexture(framebuffer, 0, &video_mem_rgba, &video_mem_pitch);
		for (int y = 0; y < GBV_SCREEN_HEIGHT; y++) {
			for (int x = 0; x < GBV_SCREEN_WIDTH; x++) {
				unsigned char *src_px = video_mem + GBV_SCREEN_WIDTH * y + x;
				unsigned char *dst_px = (unsigned char*)video_mem_rgba + y * video_mem_pitch + 4 * x;
				dst_px[0] = 0xFF;
				dst_px[1] = src_px[0];
				dst_px[2] = src_px[0];
				dst_px[3] = src_px[0];
			}
		}
		SDL_UnlockTexture(framebuffer);

		/* transfer framebuffer to screen */
		SDL_Rect dest = { 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT };
		SDL_RenderCopy(renderer, framebuffer, 0, &dest);
		SDL_RenderPresent(renderer);

		/* delay 20 ms */
		SDL_Delay(20);
	}
	SDL_Quit();

	return 0;
}